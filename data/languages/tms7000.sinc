define endian=big;

define alignment=1;

define space ram        type=ram_space      size=2  wordsize=1  default;
define space register   type=register_space size=1;

define register offset=0x00 size=2 [ SP PC ];
define register offset=0x10 size=1 [ C N Z I ST3 ST2 ST1 ST0 ];

@define C_FLAG "C"    # C: Carry
@define N_FLAG "N"    # N: Negative
@define Z_FLAG "Z"    # Z: Zero
@define I_FLAG "I"    # I: Global Interrupt Enable

define ram offset=0x00 size=1 [
    A    B    R2   R3   R4   R5   R6   R7   R8   R9
    R10  R11  R12  R13  R14  R15  R16  R17  R18  R19
    R20  R21  R22  R23  R24  R25  R26  R27  R28  R29
    R30  R31  R32  R33  R34  R35  R36  R37  R38  R39
    R40  R41  R42  R43  R44  R45  R46  R47  R48  R49
    R50  R51  R52  R53  R54  R55  R56  R57  R58  R59
    R60  R61  R62  R63  R64  R65  R66  R67  R68  R69
    R70  R71  R72  R73  R74  R75  R76  R77  R78  R79
    R80  R81  R82  R83  R84  R85  R86  R87  R88  R89
    R90  R91  R92  R93  R94  R95  R96  R97  R98  R99
    R100 R101 R102 R103 R104 R105 R106 R107 R108 R109
    R110 R111 R112 R113 R114 R115 R116 R117 R118 R119
    R120 R121 R122 R123 R124 R125 R126 R127 R128 R129
    R130 R131 R132 R133 R134 R135 R136 R137 R138 R139
    R140 R141 R142 R143 R144 R145 R146 R147 R148 R149
    R150 R151 R152 R153 R154 R155 R156 R157 R158 R159
    R160 R161 R162 R163 R164 R165 R166 R167 R168 R169
    R170 R171 R172 R173 R174 R175 R176 R177 R178 R179
    R180 R181 R182 R183 R184 R185 R186 R187 R188 R189
    R190 R191 R192 R193 R194 R195 R196 R197 R198 R199
    R200 R201 R202 R203 R204 R205 R206 R207 R208 R209
    R210 R211 R212 R213 R214 R215 R216 R217 R218 R219
    R220 R221 R222 R223 R224 R225 R226 R227 R228 R229
    R230 R231 R232 R233 R234 R235 R236 R237 R238 R239
    R240 R241 R242 R243 R244 R245 R246 R247 R248 R249
    R250 R251 R252 R253 R254 R255
];

define ram offset=0x00 size=2 [
    AB       R2R3     R4R5     R6R7     R8R9
    R10R11   R12R13   R14R15   R16R17   R18R19
    R20R21   R22R23   R24R25   R26R27   R28R29
    R30R31   R32R33   R34R35   R36R37   R38R39
    R40R41   R42R43   R44R45   R46R47   R48R49
    R50R51   R52R53   R54R55   R56R57   R58R59
    R60R61   R62R63   R64R65   R66R67   R68R69
    R70R71   R72R73   R74R75   R76R77   R78R79
    R80R81   R82R83   R84R85   R86R87   R88R89
    R90R91   R92R93   R94R95   R96R97   R98R99
    R100R101 R102R103 R104R105 R106R107 R108R109
    R110R111 R112R113 R114R115 R116R117 R118R119
    R120R121 R122R123 R124R125 R126R127 R128R129
    R130R131 R132R133 R134R135 R136R137 R138R139
    R140R141 R142R143 R144R145 R146R147 R148R149
    R150R151 R152R153 R154R155 R156R157 R158R159
    R160R161 R162R163 R164R165 R166R167 R168R169
    R170R171 R172R173 R174R175 R176R177 R178R179
    R180R181 R182R183 R184R185 R186R187 R188R189
    R190R191 R192R193 R194R195 R196R197 R198R199
    R200R201 R202R203 R204R205 R206R207 R208R209
    R210R211 R212R213 R214R215 R216R217 R218R219
    R220R221 R222R223 R224R225 R226R227 R228R229
    R230R231 R232R233 R234R235 R236R237 R238R239
    R240R241 R242R243 R244R245 R246R247 R248R249
    R250R251 R252R253 R254R255
];

define ram offset=0x01 size=2 [
    R1R2     R3R4     R5R6     R7R8     R9R10
    R11R12   R13R14   R15R16   R17R18   R19R20
    R21R22   R23R24   R25R26   R27R28   R29R30
    R31R32   R33R34   R35R36   R37R38   R39R40
    R41R42   R43R44   R45R46   R47R48   R49R50
    R51R52   R53R54   R55R56   R57R58   R59R60
    R61R62   R63R64   R65R66   R67R68   R69R70
    R71R72   R73R74   R75R76   R77R78   R79R80
    R81R82   R83R84   R85R86   R87R88   R89R90
    R91R92   R93R94   R95R96   R97R98   R99R100
    R101R102 R103R104 R105R106 R107R108 R109R110
    R111R112 R113R114 R115R116 R117R118 R119R120
    R121R122 R123R124 R125R126 R127R128 R129R130
    R131R132 R133R134 R135R136 R137R138 R139R140
    R141R142 R143R144 R145R146 R147R148 R149R150
    R151R152 R153R154 R155R156 R157R158 R159R160
    R161R162 R163R164 R165R166 R167R168 R169R170
    R171R172 R173R174 R175R176 R177R178 R179R180
    R181R182 R183R184 R185R186 R187R188 R189R190
    R191R192 R193R194 R195R196 R197R198 R199R200
    R201R202 R203R204 R205R206 R207R208 R209R210
    R211R212 R213R214 R215R216 R217R218 R219R220
    R221R222 R223R224 R225R226 R227R228 R229R230
    R231R232 R233R234 R235R236 R237R238 R239R240
    R241R242 R243R244 R245R246 R247R248 R249R250
    R251R252 R253R254
];

define token opbyte (8)
    op0_8    = (0,7)
    op0_4    = (0,3)
    op4_4    = (4,7)
    trap_idx = (0,4)
;

define token data8 (8)
    sreg  = (0,7)
    dreg  = (0,7)
#    spair = (0,7)
#    dpair = (0,7)
    imm8  = (0,7)
    simm8 = (0,7) signed
;

define token data16 (16)
    imm16  = (0,15)
;

attach values trap_idx [
     _  _  _  _  _  _  _  _
    23 22 21 20 19 18 17 16
    15 14 13 12 11 10  9  8
     7  6  5  4  3  2  1  0
];

attach variables [ sreg dreg ] [
       A    B   R2   R3   R4   R5   R6   R7   R8   R9
     R10  R11  R12  R13  R14  R15  R16  R17  R18  R19
     R20  R21  R22  R23  R24  R25  R26  R27  R28  R29
     R30  R31  R32  R33  R34  R35  R36  R37  R38  R39
     R40  R41  R42  R43  R44  R45  R46  R47  R48  R49
     R50  R51  R52  R53  R54  R55  R56  R57  R58  R59
     R60  R61  R62  R63  R64  R65  R66  R67  R68  R69
     R70  R71  R72  R73  R74  R75  R76  R77  R78  R79
     R80  R81  R82  R83  R84  R85  R86  R87  R88  R89
     R90  R91  R92  R93  R94  R95  R96  R97  R98  R99
    R100 R101 R102 R103 R104 R105 R106 R107 R108 R109
    R110 R111 R112 R113 R114 R115 R116 R117 R118 R119
    R120 R121 R122 R123 R124 R125 R126 R127 R128 R129
    R130 R131 R132 R133 R134 R135 R136 R137 R138 R139
    R140 R141 R142 R143 R144 R145 R146 R147 R148 R149
    R150 R151 R152 R153 R154 R155 R156 R157 R158 R159
    R160 R161 R162 R163 R164 R165 R166 R167 R168 R169
    R170 R171 R172 R173 R174 R175 R176 R177 R178 R179
    R180 R181 R182 R183 R184 R185 R186 R187 R188 R189
    R190 R191 R192 R193 R194 R195 R196 R197 R198 R199
    R200 R201 R202 R203 R204 R205 R206 R207 R208 R209
    R210 R211 R212 R213 R214 R215 R216 R217 R218 R219
    R220 R221 R222 R223 R224 R225 R226 R227 R228 R229
    R230 R231 R232 R233 R234 R235 R236 R237 R238 R239
    R240 R241 R242 R243 R244 R245 R246 R247 R248 R249
    R250 R251 R252 R253 R254 R255
];

################################################################
# Psuedo Instructions
################################################################
define pcodeop nop;
define pcodeop idle;
define pcodeop decimal_add;
define pcodeop decimal_add_carry;
define pcodeop decimal_subtract;
define pcodeop decimal_subtract_borrow;

################################################################
# Macros
################################################################
macro resultFlagsNoCarry(res) {
    $(N_FLAG) = (res & 0x80) == 0x80;
    $(Z_FLAG) = (res == 0);
}

macro resultFlags(res) {
    $(C_FLAG) = 0;
    resultFlagsNoCarry(res);
}

macro resultFlags16(res) {
    local msb:1 = res(1);
    resultFlags(msb);
}

macro additionFlags(op1, op2, res) {
    $(C_FLAG) = carry(op1, op2);
    resultFlagsNoCarry(res);
}

macro subtractionFlags(op1, op2, res) {
    $(C_FLAG) = (op1 >= op2);
    resultFlagsNoCarry(res);
}

macro push8(val) {
    SP = SP + 1;
    *:1 SP = val;
}

macro pop8(ret) {
    ret = *:1 SP;
    SP = SP - 1;
}

macro push16(val) {
    local ptr:2 = SP + 1;
    *:2 ptr = val;
    SP = SP + 2;
}

macro pop16(ret) {
    local ptr:2 = SP - 1;
    ret = *:2 ptr;
    SP = SP - 2;
}

macro mov16(src, dst) {
    dst = src;
    resultFlags16(dst);
}

macro mov8(src, dst) {
    dst = src;
    resultFlags(dst);
}

################################################################
# Operands
################################################################
spreg: p  is imm8 [ p = 0x100 + imm8; ] { export *:1 p; }
dpreg: p  is imm8 [ p = 0x100 + imm8; ] { export *:1 p; }

spair: sreg is sreg { local reg:1 = &sreg - 1; export *:2 reg; }
dpair: dreg is dreg { local reg:1 = &dreg - 1; export *:2 reg; }

SR: A     is op4_4=0xB & A   { export A; }
SR: B     is op4_4=0xC & B   { export B; }
SR: sreg  is op4_4=0xD; sreg { export sreg; }

SR_DST: rel  is (op4_4=0xB | op4_4=0xC); simm8 [rel = inst_next + simm8; ] { export *:2 rel; }
SR_DST: rel  is op4_4=0xD; sreg; simm8 [rel = inst_next + simm8; ]         { export *:2 rel; }

DR_SRC: "%"imm8  is (op4_4=0x2 | op4_4=0x5 | op4_4=0x7 | op4_4=0xA); imm8 { export *[const]:1 imm8; }
DR_SRC: sreg     is (op4_4=0x1 | op4_4=0x3 | op4_4=0x4); sreg             { export sreg; }
DR_SRC: B        is (op4_4=0x6 | op4_4=0x9) & B                           { export B; }
DR_SRC: A        is op4_4=0x8 & A                                         { export A; }

DR_DST: A     is (op4_4=0x1 | op4_4=0x2 | op4_4=0x6) & A { export A; }
DR_DST: B     is (op4_4=0x3 | op4_4=0x5) & B             { export B; }
DR_DST: dreg  is (op4_4=0x4 | op4_4=0x7); imm8; dreg     { export dreg; }

DR_PF_DST: dpreg  is (op4_4=0x8 | op4_4=0x9); dpreg { export dpreg; }
DR_PF_DST: dpreg  is op4_4=0xA; imm8; dpreg         { export dpreg; }

BT_DST: rel  is op4_4=0x6; simm8 [ rel = inst_next + simm8; ] { export *:2 rel; }
BT_DST: rel  is (op4_4=0x1 | op4_4=0x2 | op4_4=0x3 | op4_4=0x5 | op4_4=0x8 | op4_4=0x9); sreg; simm8 [ rel = inst_next + simm8; ] { export *:2 rel; }
BT_DST: rel  is (op4_4=0x4 | op4_4=0x7 | op4_4=0xA); sreg; dreg; simm8 [ rel = inst_next + simm8; ] { export *:2 rel; }

MEM: "@"imm16         is op4_4=0x8; imm16     { export *:1 imm16; }
MEM: "*"spair         is op4_4=0x9; spair     { export *:1 spair; }
MEM: "@"imm16"("B")"  is op4_4=0xA & B; imm16 { local tmp:2 = imm16 + zext(B); export *:1 tmp; }

DST: rel  is simm8 [ rel = inst_next + simm8; ] { export *:2 rel; }

################################################################
# Instructions
################################################################
# NOP - No Operation
:NOP is op0_8=0x00 {
    nop();
}

# IDLE - Idle Until Interrupt
:IDLE is op0_8=0x01 {
    idle();
}

# EINT - Enable Interrupts
:EINT is op0_8=0x05 {
    $(I_FLAG) = 1;
    $(C_FLAG) = 1;
    $(N_FLAG) = 1;
    $(Z_FLAG) = 1;
}

# DINT - Disable Interrupts
:DINT is op0_8=0x06 {
    $(I_FLAG) = 0;
    $(C_FLAG) = 0;
    $(N_FLAG) = 0;
    $(Z_FLAG) = 0;
}

# SETC - Set Carry
:SETC is op0_8=0x07 {
    $(C_FLAG) = 1;
    $(N_FLAG) = 0;
    $(Z_FLAG) = 1;
}

# POP ST - Pop from Stack (Status Register)
:POP "ST" is op0_8=0x08 {
    local st:1;
    pop8(st);

    C = st[7,1];
    N = st[6,1];
    Z = st[5,1];
    I = st[4,1];
    ST3 = st[3,1];
    ST2 = st[2,1];
    ST1 = st[1,1];
    ST0 = st[0,1];
#    pop8(ST);
}

# STSP - Store Stack Pointer
:STSP is op0_8=0x09 {
    B = SP:1;
}

# RETS - Return from Subroutine
:RETS is op0_8=0x0A {
    local pc:2;
    pop16(pc);
    return [pc];
}

# RETI - Return from Interrupt
:RETI is op0_8=0x0B {
    local pc:2;
    pop16(pc);

    local st:1;
    pop8(st);

    C = st[7,1];
    N = st[6,1];
    Z = st[5,1];
    I = st[4,1];
    ST3 = st[3,1];
    ST2 = st[2,1];
    ST1 = st[1,1];
    ST0 = st[0,1];

#    pop8(ST);
    return [pc];
}

# LDSP - Load Stack Pointer
:LDSP is op0_8=0x0D {
    SP = zext(B);
}

# PUSH ST - Push on Stack (Status Register)
:PUSH "ST" is op0_8=0x0E {
    local st:1 = 0x00;
    st[7,1] = C;
    st[6,1] = N;
    st[5,1] = Z;
    st[4,1] = I;
    st[3,1] = ST3;
    st[2,1] = ST2;
    st[1,1] = ST1;
    st[0,1] = ST0;
    push8(st);
#    push8(ST);
}

# TSTA - Test Register A
:TSTA is op0_8=0xB0 {
    resultFlags(A);
}

# TSTB - Test Register B
:TSTB is op0_8=0xC1 {
    resultFlags(B);
}

# MOVD - Move Double
:MOVD "%"imm16, dpair is op0_8=0x88; imm16; dpair {
    mov16(imm16, dpair);
}

# MOVD - Move Double
:MOVD spair, dpair is op0_8=0x98; spair; dpair {
    mov16(spair, dpair);
}

# MOVD - Move Double
:MOVD "%"imm16"("B")", dpair is op0_8=0xA8; imm16; dpair & B {
    local src:2 = imm16 + zext(B);
    mov16(src, dpair);
}

# MOV - Move
:MOV A,B is op0_8=0xC0 & A & B {
    mov8(A, B);
}

# MOV - Move
:MOV A,dreg is op0_8=0xD0 & A; dreg {
    mov8(A, dreg);
}

# MOV - Move
:MOV B,dreg is op0_8=0xD1 & B; dreg {
    mov8(B, dreg);
}

# MOV - Move
:MOVP spreg,A is op0_8=0x80 & A; spreg {
    local src:1 = spreg;
    mov8(src, A);
}

# MOVP - Move to/from Peripheral Register
:MOVP spreg,B is op0_8=0x91 & B; spreg {
    local src:1 = spreg;
    mov8(src, B);
}

with : (op4_4>=0x1 & op4_4<=0x7) ... {

# Dual Register Addressing Mode

# MOV - Move
:MOV DR_SRC, DR_DST is op0_4=0x2 ... & DR_SRC & DR_DST {
    mov8(DR_SRC, DR_DST);
}

# AND - Logical AND
:AND DR_SRC, DR_DST is op0_4=0x3 ... & DR_SRC & DR_DST {
    DR_DST = DR_DST & DR_SRC;
    resultFlags(DR_DST);
}

# OR - Logical OR
:OR DR_SRC, DR_DST is op0_4=0x4 ... & DR_SRC & DR_DST {
    DR_DST = DR_DST | DR_SRC;
    resultFlags(DR_DST);
}

# XOR - Exclusive OR
:XOR DR_SRC, DR_DST is op0_4=0x5 ... & DR_SRC & DR_DST {
    DR_DST = DR_DST ^ DR_SRC;
    resultFlags(DR_DST);
}

# ADD - Add
:ADD DR_SRC, DR_DST is op0_4=0x8 ... & DR_SRC & DR_DST {
    local tmp:1 = DR_DST;
    DR_DST = DR_DST + DR_SRC;
    additionFlags(tmp, DR_SRC, DR_DST);
}

# ADC - Add with Carry
:ADC DR_SRC, DR_DST is op0_4=0x9 ... & DR_SRC & DR_DST {
    local c = carry(DR_DST, DR_SRC);
    DR_DST = DR_DST + DR_SRC;
    c = c || carry(DR_DST, $(C_FLAG));
    DR_DST = DR_DST + $(C_FLAG);
    resultFlags(DR_DST);
    $(C_FLAG) = c;
}

# SUB - Subtract
:SUB DR_SRC, DR_DST is op0_4=0xA ... & DR_SRC & DR_DST {
    local tmp:1 = DR_DST;
    DR_DST = DR_DST - DR_SRC;
    subtractionFlags(tmp, DR_SRC, DR_DST);
}

# SBB - Subtract with Borrow
:SBB DR_SRC, DR_DST is op0_4=0xB ... & DR_SRC & DR_DST {
    local sub:2 = 1 + zext(DR_SRC) - zext($(C_FLAG));
    local res:2 = zext(DR_DST) - sub;
    DR_DST = res:1;
    resultFlags(DR_DST);
    $(C_FLAG) = (zext(DR_DST) >= sub);
}

# MPY - Multiply
:MPY DR_SRC, DR_DST is op0_4=0xC ... & DR_SRC & DR_DST {
    local res:2 = zext(DR_SRC) * zext(DR_DST);
    A = res(1);
    B = res:1;
    resultFlags16(res);
}

# CMP - Compare
:CMP DR_SRC, DR_DST is op0_4=0xD ... & DR_SRC & DR_DST {
    local tmp:1 = DR_DST - DR_SRC;
    subtractionFlags(DR_DST, DR_SRC, tmp);
}

# DAC - Decimal Add with Carry
:DAC DR_SRC, DR_DST is op0_4=0xE ... & DR_SRC & DR_DST {
    local tmp:1 = DR_DST;
    DR_DST = decimal_add(DR_DST, DR_SRC);
    resultFlagsNoCarry(DR_DST);
    $(C_FLAG) = decimal_add_carry(DR_DST, DR_SRC, tmp);
}

# DSB - Decimal Subtract with Borrow
:DSB DR_SRC, DR_DST is op0_4=0xF ... & DR_SRC & DR_DST {
    local tmp:1 = DR_DST;
    DR_DST = decimal_subtract(DR_DST, DR_SRC);
    resultFlagsNoCarry(DR_DST);
    $(C_FLAG) = decimal_subtract_borrow(DR_DST, DR_SRC, tmp);
}

# BTJO - Bit Test and Jump If One
:BTJO DR_SRC, DR_DST, BT_DST is op0_4=0x6 ... & DR_SRC & DR_DST & BT_DST {
    local tmp:1 = DR_SRC & DR_DST;
    resultFlags(tmp);
    if (tmp) goto BT_DST;
}

# BTJZ - Bit Test and Jump If Zero
:BTJZ DR_SRC, DR_DST, BT_DST is op0_4=0x7 ... & DR_SRC & DR_DST & BT_DST {
    local tmp:1 = DR_SRC & ~DR_DST;
    resultFlags(tmp);
    if (tmp) goto BT_DST;
}

}


with : (op4_4>=0x8 & op4_4<=0xa) ... {

# Peripheral-File Addressing Mode

# MOVP - Move to/from Peripheral Register
:MOVP DR_SRC, DR_PF_DST is op0_4=0x2 ... & DR_SRC & DR_PF_DST {
    local dst:1;
    mov8(DR_SRC, dst);
    DR_PF_DST = dst;
}

# ANDP - AND Peripheral Register
:ANDP DR_SRC, DR_PF_DST is op0_4=0x3 ... & DR_SRC & DR_PF_DST {
    local dst:1 = DR_PF_DST & DR_SRC;
    resultFlags(dst);
    DR_PF_DST = dst;
}

# ORP - OR Peripheral Register
:ORP DR_SRC, DR_PF_DST is op0_4=0x4 ... & DR_SRC & DR_PF_DST {
    local dst:1 = DR_PF_DST | DR_SRC;
    resultFlags(dst);
    DR_PF_DST = dst;
}

# XORP - Exclusive OR Peripheral Register
:XORP DR_SRC, DR_PF_DST is op0_4=0x5 ... & DR_SRC & DR_PF_DST {
    local dst:1 = DR_PF_DST ^ DR_SRC;
    resultFlags(dst);
    DR_PF_DST = dst;
}

# BTJOP - Bit Test and Jump If One - Peripheral
:BTJOP DR_SRC, DR_PF_DST, BT_DST is op0_4=0x6 ... & DR_SRC & DR_PF_DST & BT_DST {
    local tmp:1 = DR_SRC & DR_PF_DST;
    resultFlags(tmp);
    if (tmp) goto BT_DST;
}

# BTJZP - Bit Test and Jump If Zero - Peripheral
:BTJZP DR_SRC, DR_PF_DST, BT_DST is op0_4=0x7 ... & DR_SRC & DR_PF_DST & BT_DST {
    local tmp:1 = DR_SRC & ~DR_PF_DST;
    resultFlags(tmp);
    if (tmp) goto BT_DST;
}

# Direct Memory, Register File Indirect and Indexed Addressing Modes.

# LDA - Load Register A
:LDA MEM is op0_4=0xA ... & MEM {
    A = MEM;
    resultFlags(A);
}

# STA - Store Register A
:STA MEM is op0_4=0xB ... & MEM {
    MEM = A;
    resultFlags(A);
}

# BR - Branch
#:BR MEM is op0_4=0xC ... & MEM {
#    local addr:2 = &MEM;
#    goto [addr];
#}
:BR MEM is op0_8=0x8C ... & MEM {
    goto MEM;
}
#:BR MEM is op0_8=0x9C ... & MEM {
#    local addr:2 = &MEM;
#    goto [addr];
#} { export *:1 spair; }
:BR "*"spair is op0_8=0x9C; spair {
    goto [spair];
}
:BR MEM is op0_8=0xAC ... & MEM {
    local addr:2 = &MEM;
    goto [addr];
}

# CMPA - Compare Accumulator Extended
:CMPA MEM is op0_4=0xD ... & MEM {
    local sub:1 = MEM;
    local tmp:1 = A - sub;
    subtractionFlags(A, sub, tmp);
}

# CALL - Call
#:CALL MEM is op0_4=0xE ... & MEM {
#    local pc:2 = inst_next;
#    push16(pc);
##    call MEM;
#    local addr:2 = &MEM;
#    goto [addr];
#}
:CALL MEM is op0_8=0x8E ... & MEM {
    local pc:2 = inst_next;
    push16(pc);
    call MEM;
}
:CALL MEM is op0_8=0x9E ... & MEM {
    local pc:2 = inst_next;
    push16(pc);
    local addr:2 = &MEM;
    call [addr];
}
:CALL MEM is op0_8=0xAE ... & MEM {
    local pc:2 = inst_next;
    push16(pc);
    local addr:2 = &MEM;
    call [addr];
}

}


with : (op4_4>=0xB & op4_4<=0xD) ... {

# Single Register Addressing Mode

# DEC - Decrement
:DEC SR is op0_4=0x2 ... & SR {
    local tmp:1 = SR;
    SR = SR - 1;
    subtractionFlags(tmp, 1, SR);
}

# INC - Increment
:INC SR is op0_4=0x3 ... & SR {
    local tmp:1 = SR;
    SR = SR + 1;
    additionFlags(tmp, 1, SR);
}

# INV - Invert
:INV SR is op0_4=0x4 ... & SR {
    SR = ~SR;
    resultFlags(SR);
}

# CLR - Clear
:CLR SR is op0_4=0x5 ... & SR {
    SR = 0;
    resultFlags(SR);
}

# XCHB - Exchange with Register B
:XCHB SR is op0_4=0x6 ... & SR {
    local tmp:1 = B;
    B = SR;
    SR = tmp;
    resultFlags(tmp);
}

# SWAP - Swap Nibbles
:SWAP SR is op0_4=0x7 ... & SR {
    SR = ((SR & 0xF) << 4) | ((SR & 0xF0) >> 4);
    resultFlags(SR);
    $(C_FLAG) = (SR & 1);
}

# PUSH - Push on Stack
:PUSH SR is op0_4=0x8 ... & SR {
    push8(SR);
}

# POP - Pop from Stack
:POP SR is op0_4=0x9 ... & SR {
    pop8(SR);
}

# DJNZ - Decrement Register and Jump If Not Zero
:DJNZ SR, SR_DST is op0_4=0xA ... & SR & SR_DST {
    SR = SR - 1;
    if (SR) goto SR_DST;
}

# RR - Rotate Right
:RR SR is op0_4=0xC ... & SR {
    SR = (SR >> 1) | ((SR & 1) << 7);
    resultFlags(SR);
    $(C_FLAG) = SR & 0x80;
}

# RRC - Rotate Right Through Carry
:RRC SR is op0_4=0xD ... & SR {
    local c = SR & 1;
    SR = (SR >> 1) | ($(C_FLAG) << 7);
    resultFlags(SR);
    $(C_FLAG) = c;
}

# RL - Rotate Left
:RL SR is op0_4=0xE ... & SR {
    SR = (SR << 1) | ((SR & 0x80) >> 7);
    resultFlags(SR);
    $(C_FLAG) = SR & 1;
}

# RLC - Rotate Left Through Carry
:RLC SR is op0_4=0xF ... & SR {
    local c = SR & 0x80;
    SR = (SR << 1) | $(C_FLAG);
    resultFlags(SR);
    $(C_FLAG) = c;
}

}

# DECD - Decrement Double
#:DECD spair is op0_4=0xB & spair {
:DECD spair is op0_8=0xDB; spair {
    local tmp:2 = spair;
    tmp = tmp - 1;
    spair = tmp;
    local msb:1 = tmp(1);
    local c:1 = msb != 0xff;
    resultFlagsNoCarry(msb);
    $(C_FLAG) = c;
}

:DECD B is op0_8=0xCB & B {
    local tmp:2 = AB;
    tmp = tmp - 1;
    AB = tmp;
    local msb:1 = tmp(1);
    local c:1 = msb != 0xff;
    resultFlagsNoCarry(msb);
    $(C_FLAG) = c;
}

# Program Counter Relative Addressing Mode
:JMP DST is op0_8=0xE0; DST {
    goto DST;
}

:JN DST is op0_8=0xE1; DST {
    if ($(N_FLAG)) goto DST;
}

:JZ DST is op0_8=0xE2; DST {
    if ($(Z_FLAG)) goto DST;
}

:JC DST is op0_8=0xE3; DST {
    if ($(C_FLAG)) goto DST;
}

:JP DST is op0_8=0xE4; DST {
    if (($(N_FLAG) == 0) && ($(Z_FLAG) == 0)) goto DST;
}

:JPZ DST is op0_8=0xE5; DST {
    if (($(N_FLAG) == 0) && $(Z_FLAG)) goto DST;
}

:JNZ DST is op0_8=0xE6; DST {
    if ($(Z_FLAG) == 0) goto DST;
}

:JNC DST is op0_8=0xE7; DST {
    if ($(C_FLAG) == 0) goto DST;
}

:TRAP trap_idx is op0_8>=0xE8 & trap_idx {
    local tmp:2 = 0xFFFE - (trap_idx * 2);
    local vec:2 = *:2 tmp;
    local pc:2 = inst_next;
    push16(pc);
    call [vec];
}
